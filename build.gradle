plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'jacoco'
}

group 'pcf.crskdev'
version '0.1-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    ktlint
}
test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"
    }
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it)
        })
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }

        rule {
            enabled = false
            element = 'CLASS'


            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
jacoco {
    toolVersion = "0.8.5"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
    implementation("com.squareup.okhttp3:okhttp:4.9.0")
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.9.0'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.13.1'
    implementation 'org.nanohttpd:nanohttpd:2.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'

    ktlint "com.pinterest:ktlint:0.39.0"
    testImplementation "io.mockk:mockk:1.10.0"
    def kotest = "4.2.5"
    testImplementation "io.kotest:kotest-runner-junit5:${kotest}" // for kotest framework
    testImplementation "io.kotest:kotest-assertions-core:${kotest}" // for kotest core jvm assertions
    testImplementation "io.kotest:kotest-property:${kotest}" // for kotest property test
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9'
    testImplementation "com.squareup.okhttp3:mockwebserver:4.9.0"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xallow-result-return-type"]
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

